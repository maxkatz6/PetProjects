struct VColorOutput 
{
  float4 position : POSITION;
  float4 color    : COLOR;
};
struct VTextureOutput 
{
  float4 position : POSITION;
  float2 tex    : TEXCOORD0;
};


VColorOutput VertexColor( float3 position : POSITION , float4 color : COLOR)
{	
  VColorOutput OUT;

  OUT.position = float4( position, 1 );
  OUT.color = color;

  return OUT;
}

float4 PixelColor( VColorOutput input ) : COLOR
{
  return input.color;
}

VTextureOutput VertexTexture( float3 position : POSITION , float2 tex : TEXCOORD0)
{	
  VTextureOutput OUT;

  OUT.position = float4( position, 1 );
  OUT.tex = tex;

  return OUT;
}

float4 PixelTexture( VTextureOutput input, uniform sampler2D decal : TEX0 ) : COLOR
{
  return tex2D(decal, input.tex );
}

technique Dx11_Color
{
  pass P0
  {
      VertexProgram = compile vs_5_0 VertexColor();
      FragmentProgram = compile ps_5_0 PixelColor();
  }
}
technique OpGl_Color
{
  pass P0
  {
      VertexProgram = compile gp5vp  VertexColor();
      FragmentProgram = compile gp5fp  PixelColor();
  }
}

sampler2D Decal = sampler_state
{
    AddressU = Mirror;
    AddressV = Mirror;
};

technique Dx11_Texture
{
  pass P0
  {  
      VertexProgram = compile vs_5_0 VertexTexture();
      FragmentProgram = compile ps_5_0 PixelTexture(Decal );
  }
}
technique OpGl_Texture
{
  pass P0
  {
      VertexProgram = compile gp5vp  VertexTexture();
      FragmentProgram = compile gp5fp  PixelTexture(Decal );
  }
}
