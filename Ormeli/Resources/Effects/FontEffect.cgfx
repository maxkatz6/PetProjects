struct VColorOutput 
{
  float4 position : POSITION;
  float4 color    : COLOR;
};
struct VTextureOutput 
{
  float4 position : POSITION;
  float2 tex    : TEXCOORD0;
};

VTextureOutput VertexTexture( float2 position : POSITION , float2 tex : TEXCOORD0, uniform float4x4 modelViewProj)
{	
  VTextureOutput OUT;
  
  OUT.position =mul( float4( position, -1,1 ),modelViewProj);
  OUT.tex = tex;

  return OUT;
}

float4 PixelTexture( VTextureOutput input, uniform sampler2D decal : TEX0 ) : COLOR
{
  return tex2D(decal, input.tex );
}

float4x4 Ortho;
sampler2D FontTexture = sampler_state
{
    AddressU = Mirror;
    AddressV = Mirror;
};

technique Font
{
  pass P0
  {
      VertexProgram = compile latest  VertexTexture(WVP);
      FragmentProgram = compile latest  PixelTexture(Decal );
  }
}
